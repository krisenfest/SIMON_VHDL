library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all; 
use work.printerlib.all;

-- Methods | messageLength/keyLength | keySegmentLength | keySegments | messageSegments | messageSegmentLength| cryptLoopCount | Zselect
-- 0000    | 32/64                   | 16               | 4           | 2               | 16                  | 32             | 0
-- 0001    | 48/72                   | 24               | 3           | 2               | 24                  | 36             | 0
-- 0010    | 48/96                   | 24               | 4           | 2               | 24                  | 36             | 1
-- 0011    | 64/96                   | 32               | 3           | 2               | 32                  | 42             | 2
-- 0100    | 64/128                  | 32               | 4           | 2               | 32                  | 44             | 3
-- 0101    | 96/96                   | 48               | 2           | 2               | 48                  | 52             | 2
-- 0110    | 96/144                  | 48               | 3           | 2               | 48                  | 54             | 3
-- 0111    | 128/128                 | 64               | 2           | 2               | 64                  | 68             | 2
-- 1000    | 128/192                 | 64               | 3           | 2               | 64                  | 69             | 3
-- 1001    | 128/256                 | 64               | 4           | 2               | 64                  | 72             | 4

entity main is
    port(
        mode: in std_logic;
        method: in std_logic_vector(3 downto 0);
        keyIn: in std_logic_vector(255 downto 0);
        messageIn: in std_logic_vector(127 downto 0);
        messageOut: out std_logic_vector(127 downto 0) := (others => '0')
    );
end main;

architecture behaviour of main is
-- //////// //////// //////// //////// //////// //////// //////// ////////
    -- declare Z's
    signal Z_0: std_logic_vector(61 downto 0) := "11111010001001010110000111001101111101000100101011000011100110";
    signal Z_1: std_logic_vector(61 downto 0) := "10001110111110010011000010110101000111011111001001100001011010";
    signal Z_2: std_logic_vector(61 downto 0) := "10101111011100000011010010011000101000010001111110010110110011";
    signal Z_3: std_logic_vector(61 downto 0) := "11011011101011000110010111100000010010001010011100110100001111";
    signal Z_4: std_logic_vector(61 downto 0) := "11010001111001101011011000100000010111000011001010010011101111";
    signal selectedZ: std_logic_vector(61 downto 0) := "00000000000000000000000000000000000000000000000000000000000000";

    -- internal signals 
    signal simon_32_64_output: std_logic_vector(127 downto 0) := (others => '0');
    signal simon_48_72_output: std_logic_vector(127 downto 0) := (others => '0'); 
    signal simon_48_96_output: std_logic_vector(127 downto 0) := (others => '0');
    signal simon_64_96_output: std_logic_vector(127 downto 0) := (others => '0');
    signal simon_64_128_output: std_logic_vector(127 downto 0) := (others => '0');
    signal simon_96_96_output: std_logic_vector(127 downto 0) := (others => '0');
    signal simon_96_144_output: std_logic_vector(127 downto 0) := (others => '0');
    signal simon_128_128_output: std_logic_vector(127 downto 0) := (others => '0');
    signal simon_128_192_output: std_logic_vector(127 downto 0) := (others => '0');
    signal simon_128_256_output: std_logic_vector(127 downto 0) := (others => '0');

    -- declare components
    component simon_32_64
        port(
            mode: in std_logic;
            method: in std_logic_vector(3 downto 0);
            keyIn: in std_logic_vector(255 downto 0);
            messageIn: in std_logic_vector(127 downto 0);
            messageOut: out std_logic_vector(127 downto 0);   
            Z: in std_logic_vector(61 downto 0)
        );
    end component;

    component simon_48_72
        port(
            mode: in std_logic;
            method: in std_logic_vector(3 downto 0);
            keyIn: in std_logic_vector(255 downto 0);
            messageIn: in std_logic_vector(127 downto 0);
            messageOut: out std_logic_vector(127 downto 0);   
            Z: in std_logic_vector(61 downto 0)
        );
    end component;

    component simon_48_96
        port(
            mode: in std_logic;
            method: in std_logic_vector(3 downto 0);
            keyIn: in std_logic_vector(255 downto 0);
            messageIn: in std_logic_vector(127 downto 0);
            messageOut: out std_logic_vector(127 downto 0);   
            Z: in std_logic_vector(61 downto 0)
        );
    end component;

    component simon_64_96
        port(
            mode: in std_logic;
            method: in std_logic_vector(3 downto 0);
            keyIn: in std_logic_vector(255 downto 0);
            messageIn: in std_logic_vector(127 downto 0);
            messageOut: out std_logic_vector(127 downto 0);   
            Z: in std_logic_vector(61 downto 0)
        );
    end component;

    component simon_64_128
        port(
            mode: in std_logic;
            method: in std_logic_vector(3 downto 0);
            keyIn: in std_logic_vector(255 downto 0);
            messageIn: in std_logic_vector(127 downto 0);
            messageOut: out std_logic_vector(127 downto 0);   
            Z: in std_logic_vector(61 downto 0)
        );
    end component;

    component simon_96_96
        port(
            mode: in std_logic;
            method: in std_logic_vector(3 downto 0);
            keyIn: in std_logic_vector(255 downto 0);
            messageIn: in std_logic_vector(127 downto 0);
            messageOut: out std_logic_vector(127 downto 0);   
            Z: in std_logic_vector(61 downto 0)
        );
    end component;

    component simon_96_144
        port(
            mode: in std_logic;
            method: in std_logic_vector(3 downto 0);
            keyIn: in std_logic_vector(255 downto 0);
            messageIn: in std_logic_vector(127 downto 0);
            messageOut: out std_logic_vector(127 downto 0);   
            Z: in std_logic_vector(61 downto 0)
        );
    end component;

    component simon_128_128
        port(
            mode: in std_logic;
            method: in std_logic_vector(3 downto 0);
            keyIn: in std_logic_vector(255 downto 0);
            messageIn: in std_logic_vector(127 downto 0);
            messageOut: out std_logic_vector(127 downto 0);   
            Z: in std_logic_vector(61 downto 0)
        );
    end component;

    component simon_128_192
        port(
            mode: in std_logic;
            method: in std_logic_vector(3 downto 0);
            keyIn: in std_logic_vector(255 downto 0);
            messageIn: in std_logic_vector(127 downto 0);
            messageOut: out std_logic_vector(127 downto 0);   
            Z: in std_logic_vector(61 downto 0)
        );
    end component;

    component simon_128_256
        port(
            mode: in std_logic;
            method: in std_logic_vector(3 downto 0);
            keyIn: in std_logic_vector(255 downto 0);
            messageIn: in std_logic_vector(127 downto 0);
            messageOut: out std_logic_vector(127 downto 0);   
            Z: in std_logic_vector(61 downto 0)
        );
    end component;

-- //////// //////// //////// //////// //////// //////// //////// ////////
    begin
    -- connect components
        simonBlock_32_64: simon_32_64 port map(
            mode => mode,
            method => method,
            keyIn => keyIn,
            messageIn => messageIn,
            messageOut => simon_32_64_output,
            Z => selectedZ
        );

        simonBlock_48_72: simon_48_72 port map(
            mode => mode,
            method => method,
            keyIn => keyIn,
            messageIn => messageIn,
            messageOut => simon_48_72_output,
            Z => selectedZ
        );

        simonBlock_48_96: simon_48_96 port map(
            mode => mode,
            method => method,
            keyIn => keyIn,
            messageIn => messageIn,
            messageOut => simon_48_96_output,
            Z => selectedZ
        );

        simonBlock_64_96: simon_64_96 port map(
            mode => mode,
            method => method,
            keyIn => keyIn,
            messageIn => messageIn,
            messageOut => simon_64_96_output,
            Z => selectedZ
        );

        simonBlock_64_128: simon_64_128 port map(
            mode => mode,
            method => method,
            keyIn => keyIn,
            messageIn => messageIn,
            messageOut => simon_64_128_output,
            Z => selectedZ
        );

        simonBlock_96_96: simon_96_96 port map(
            mode => mode,
            method => method,
            keyIn => keyIn,
            messageIn => messageIn,
            messageOut => simon_96_96_output,
            Z => selectedZ
        );

        simonBlock_96_144: simon_96_144 port map(
            mode => mode,
            method => method,
            keyIn => keyIn,
            messageIn => messageIn,
            messageOut => simon_96_144_output,
            Z => selectedZ
        );

        simonBlock_128_128: simon_128_128 port map(
            mode => mode,
            method => method,
            keyIn => keyIn,
            messageIn => messageIn,
            messageOut => simon_128_128_output,
            Z => selectedZ
        );

        simonBlock_128_19: simon_128_192 port map(
            mode => mode,
            method => method,
            keyIn => keyIn,
            messageIn => messageIn,
            messageOut => simon_128_192_output,
            Z => selectedZ
        );

        simonBlock_128_256: simon_128_256 port map(
            mode => mode,
            method => method,
            keyIn => keyIn,
            messageIn => messageIn,
            messageOut => simon_128_256_output,
            Z => selectedZ
        );
    -- main process
        process(method,simon_32_64_output,simon_48_72_output,simon_48_96_output,simon_64_96_output,simon_96_96_output,simon_96_144_output,simon_128_128_output,simon_128_192_output,simon_128_256_output)
        begin
            case method is
                when "0000" => selectedZ <= Z_0; messageOut <= simon_32_64_output;
                when "0001" => selectedZ <= Z_0; messageOut <= simon_48_72_output;     
                when "0010" => selectedZ <= Z_1; messageOut <= simon_48_96_output;
                when "0011" => selectedZ <= Z_2; messageOut <= simon_64_96_output;
                when "0100" => selectedZ <= Z_3; messageOut <= simon_64_128_output;
                when "0101" => selectedZ <= Z_2; messageOut <= simon_96_96_output;
                when "0110" => selectedZ <= Z_3; messageOut <= simon_96_144_output;
                when "0111" => selectedZ <= Z_2; messageOut <= simon_128_128_output;
                when "1000" => selectedZ <= Z_3; messageOut <= simon_128_192_output;
                when "1001" => selectedZ <= Z_4; messageOut <= simon_128_256_output;
                when others => print("  main::error"); flush;
            end case;
        end process;
end behaviour;