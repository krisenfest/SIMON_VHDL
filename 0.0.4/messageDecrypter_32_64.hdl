library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all; 
use work.printerlib.all;

entity messageDecrypter_32_64 is
    port(
        keyIn: in std_logic_vector(255 downto 0);
        messageIn: in std_logic_vector(127 downto 0);
        messageOut: out std_logic_vector(127 downto 0)
    );
end messageDecrypter_32_64;

architecture behaviour of messageDecrypter_32_64 is
    function decrypt_32_64(messageIn, keyIn: std_logic_vector)
    return std_logic_vector is
        variable x: std_logic_vector(15 downto 0) := messageIn(31 downto 16);
        variable y: std_logic_vector(15 downto 0) := messageIn(15 downto 0);
        variable combiner: std_logic_vector(31 downto 0) := (others => '0');    
        variable returnValue: std_logic_vector(127 downto 0) := (others => '0');
        variable holder, temp: std_logic_vector(15 downto 0);
        variable key: std_logic_vector(15 downto 0) := keyIn(15 downto 0);
    begin
        holder := y;
        temp := (y(y'length-2 downto 0) & y(y'length-1)) and (y(y'length-9 downto 0) & y(y'length-1 downto y'length-8)); 
        temp := temp xor x;
        temp := temp xor (y(y'length-3 downto 0) & y(y'length-1 downto y'length-2));
        temp := temp xor key;
        y := temp;
        x := holder; 

        combiner := (x & y);
        return (returnValue'length-1 downto combiner'length => '0') & combiner;
    end function;

begin
    process(messageIn, keyIn) 
    begin
        messageOut <= decrypt_32_64(messageIn,keyIn);
    end process;
end behaviour;