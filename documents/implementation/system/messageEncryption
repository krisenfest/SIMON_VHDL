	The message encrypter module takes a key and uses it to encrypt a provided message, 
producing an encrypted message which is used by subsequent encryption modules or produced
as the system's encrypted message.

Messages come in two segments and in a variety of lengths, as defined by the method
|	
|	Method	|	message length	
|		1 	|		32 
|		2	|		48 
|		3	|		48 
|		4	|		64 
|		5	|		64 
|		6	|		96 
|		7	|		96 
|		8	|		128
|		9	|		128
|		10	|		128

	It is worth noting that for each method, the length of each key segment and message
segment is the same.

- process -
The received message is encrypted like so;

	newMessageSegment = leftRotate( messageSegment 1 )once 
						AND leftRotate( messageSegment 1 )eightTimes
	newMessageSegment = newMessageSegment XOR messageSegment 2
	newMessageSegment = newMessageSegment XOR leftRotate( messageSegment 1 )twice
	newMessageSegment = newMessageSegment XOR keySegment(keySegmentCount-1)

The produced message is now newMessageSegment with messageSegment 1 attached
	
- example -
	using method 1 for this example, our inputs will be:
			
	messageIn: 	0110010101100101 0110100001110111
	keyIn: 		0001100100011000 0001000100010000 0000100100001000 0000000100000000 
	
1. right rotate message segment one once and eight times, then AND these two together
	newMessageSegment 	= 	leftRotate( 0110010101100101 )once 
							AND leftRotate( 0110010101100101 )eightTimes
						=	1100101011001010 AND 0110010101100101
						=	0100000001000000
	
2. XOR newMessageSegment with message segment 2
	newMessageSegment 	= 	0100000001000000 XOR 0110100001110111
					 	= 	0010100000110111
						
3. XOR newMessageSegment with a twice left rotated message segment 1
	newMessageSegment 	= 	0010100000110111 XOR leftRotate( 0110010101100101 )twice 
						=	0010100000110111 XOR 1001010110010101
						=	1011110110100010
						
4. XOR newMessageSegment with the last key segment (key segment (keySegmentCount-1))
	newMessageSegment 	= 	1011110110100010 XOR 0000000100000000 	
						=	1011110010100010
	
The message produced from the module is 
		1011110010100010 0110010101100101
(notice how the last segment here, is the first segment from the input)