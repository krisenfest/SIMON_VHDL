	The key expander module uses a provided key and a 'Z' value as a seed to produce a 
new key to be used by an encryption or decryption module. The newly produced key and 
a morphed 'Z' value is then used by further key expansion modules 

A key can come in a variety of lengths and segments, as defined by the method
|	
|	Method	|	key length	|	key segments
|		1 	|		64  	|		4
|		2	|		72  	|   	3
|		3	|		96  	|   	4
|		4	|		96  	|   	3
|		5	|		128 	|   	4
|		6	|		96  	|   	2
|		7	|		144 	|   	3
|		8	|		128		|   	2
|		9	|		192		|   	3
|		10	|		256		|   	4
		
The initial 'Z' value to be used is also defined by the method
|
|	Method	|	Selected Z 
|		1 	|		0
|		2	|		0
|		3	|		1
|		4	|		2
|		5	|		3
|		6	|		2
|		7	|		3
|		8	|		2
|		9	|		3
|		10	|		4
|		
|	Z Types	| 	Values
|		0 	|	11111010001001010110000111001101111101000100101011000011100110
|		1 	|	10001110111110010011000010110101000111011111001001100001011010
|		2 	|	10101111011100000011010010011000101000010001111110010110110011
|		3 	|	11011011101011000110010111100000010010001010011100110100001111
|		4 	|	11010001111001101011011000100000010111000011001010010011101111

	'Z' values are always 62 bits long, regardless of method. Only one bit of the 'Z'
value is used in each key module, which is selected based on the module's position in 
the key expansion process; first bit first, second bit second, etc. with the selection
looping back to the start if more than 62 stages are used.
	In this design; a module will always use the first bit, then modify the 'Z' value to
put the first bit at the end, and pass this newly created 'Z' value to the subsequent 
key expander.

- process -
The received key is expanded like so;

	newKey = rightRotate( keySegment 0 )threeTimes
	if(keySegmentCount = 4)then -> newKey = newKey XOR ( keySegment 2 )
	newKey = newKey XOR rightRotate( newKey )once
	newKey = newKey XOR keySegment(keySegmentCount-1) 
	newKey = newKey XOR (keySegmentLength-1 of 0's, with Z's first bit)
	newKey = newKey XOR -4; 
	
The produced key is now 'newKey' with the first (keySegmentCount-1) segments of the 
received key attached
	
- example -
	using method 1 for this example, our inputs will be:
			
	keySegmentCount: 4
	selected Z: 0
	keyIn: 	0001100100011000 0001000100010000 0000100100001000 0000000100000000 
	Z: 		11111010001001010110000111001101111101000100101011000011100110
	
1. triple right rotate segment one
	newKey 	= 	rightRotate3(0001100100011000)
			= 	0000001100100011

2. there are four segments here, so XOR newKey with key segment 2
	newKey 	= 	0000001100100011 XOR 0000100100001000
			=	0000101000101011
	
3. XOR newKey with a right-rotated version of itself
	newKey 	= 	0000101000101011 XOR 1000010100010101
			= 	1000111100111110
	
4. XOR neyKey with keySegment (keySegmentCount-1), which here is segment 3
	newKey 	= 	1000111100111110 XOR 0000000100000000
			= 	1000111000111110
	
5. XOR Z's first bit (most left) with neyKey's last bit (most right) 
	newKey 	= 	1000111000111110
	Z's first bit: 1
			=	1000111000111110 XOR 0000000000000001
			=	1000111000111111
		
6. 	XOR newKey with the value -4
	newKey 	= 	1000111000111111 XOR 1111111111111100	
			= 	0111000111000011
	
The key produced from this module is
		0111000111000011 0001100100011000 0001000100010000 0000100100001000
(notice how the last three segments here, are the first three segments from the input)
		
Simply left rotating the Z value, the new Z vale is produced for use by the next module
		original: 11111010001001010110000111001101111101000100101011000011100110
		produced: 11110100010010101100001110011011111010001001010110000111001101
